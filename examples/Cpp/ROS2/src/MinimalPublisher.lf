/**
 * The provided Lingua Franca (LF) program is designed to publish messages onto a ROS2 topic at a
 * regular interval. Specifically, it publishes a 'std_msgs/msg/String' message on the topic named
 * "topic" every 500 milliseconds. The message contains a string "Hello, world!" followed by a
 * counter value that increments with each published message. This LF program illustrates a simple
 * example of a ROS2 publisher, making use of LF's precise timing semantics to ensure regular
 * message publication.
 */
target Cpp {
  ros2: true,
  ros2-dependencies: ["std_msgs"]
}

public preamble {=
  #include "rclcpp/rclcpp.hpp"
  #include "std_msgs/msg/string.hpp"
=}

main reactor {
  private preamble {=
    // FIXME: forward declaration to make the node visible
    extern rclcpp::Node* lf_node;
  =}

  state publisher: {= rclcpp::Publisher<std_msgs::msg::String>::SharedPtr =}
  state count: unsigned(0)

  timer t(0, 500 ms)

  reaction(startup) {=
    publisher = lf_node->create_publisher<std_msgs::msg::String>("topic", 10);
  =}

  reaction(t) {=
    auto message = std_msgs::msg::String();
    message.data = "Hello, world! " + std::to_string(count++);
    reactor::log::Info() << "Publishing: " << message.data;
    publisher->publish(message);
  =}
}
