/**
 * This example illustrates the use of logical and physical actions, asynchronous external inputs,
 * the use of startup and shutdown reactions, and the use of actions with values.
 *
 * @author Christian Menard
 * @author Felix Wittwer
 * @author Edward A. Lee
 * @author Marten Lohstroh
 */
target Cpp

reactor RandomDelay(min_delay: time(2 sec), max_delay: time(8 sec)) {
  public preamble {=
    #include <random>
  =}

  input in: void
  output out: void
  logical action delay(min_delay): void

  // a random number generator seeded with the current physical time
  state rand: std::mt19937({= get_physical_time().time_since_epoch().count() =})
  // a uniform random distribution with a range from 1 to (max_delay - min_delay) milliseconds
  state dist: std::uniform_int_distribution<int>(
      1,
      {= (max_delay - min_delay) / std::chrono::milliseconds(1) =})

  reaction(delay) -> out {=
    out.set();
  =}

  reaction(in) -> delay {=
    delay.schedule(dist(rand) * std::chrono::milliseconds(1));
  =}
}

reactor KeyboardInput {
  state thread: std::thread
  state terminate: std::atomic<bool> = false
  physical action keyboard_input: char

  output enter: void
  output quit: void

  reaction(startup) -> keyboard_input {=
    // Start the thread that listens for keyboard input.
    thread = std::thread([&] () {
      int c{0};
      while(!terminate.load()) {
        c = getchar();
        keyboard_input.schedule(c);
      }
    });
  =}

  reaction(keyboard_input) -> enter, quit {=
    char key = *keyboard_input.get();
    if(key  == '\n') {
      enter.set();
    } else if (key == EOF) {
      quit.set();
    }
  =}

  reaction(shutdown) {=
    terminate.store(true);
    thread.join();
  =}
}

reactor GameLogic {
  output request_prompt: void
  input prompt: void
  input enter: void
  input quit: void

  state prompt_time: {= reactor::TimePoint =} = {= reactor::TimePoint::min() =}
  state count: unsigned = 0
  state total_time: time(0)

  reaction(startup) -> request_prompt {=
    std::cout << "***********************************************" << std::endl;
    std::cout << "Watch for the prompt, then hit Return or Enter." << std::endl;
    std::cout << "Type Control-D (EOF) to quit." << std::endl << std::endl;

    // request the first prompt
    request_prompt.set();
  =}

  reaction(prompt) {=
    prompt_time = get_physical_time();
    std::cout << std::endl << "Hit Return or Enter!" << std::endl;
  =}

  reaction(enter) -> request_prompt {=
    // If the prompt_time is 0, then the user is cheating and
    // hitting return before being prompted.
    if (prompt_time == reactor::TimePoint::min()) {
      std::cout << "YOU CHEATED!" << std::endl;
      environment()->sync_shutdown();
    } else {
      reactor::TimePoint logical = get_logical_time();
      std::chrono::duration elapsed = (logical - prompt_time);
      auto time_in_ms = std::chrono::duration_cast<std::chrono::milliseconds>(elapsed);
      std::cout << "Response time in milliseconds: " << time_in_ms << std::endl;
      count++;
      total_time += time_in_ms;
      // Reset the prompt_time to indicate that there is no new prompt.
      prompt_time = reactor::TimePoint::min();
      // Request another prompt.
      request_prompt.set();
    }
  =}

  reaction(quit) {=
    environment()->sync_shutdown();
  =}

  reaction(shutdown) {=
    if (count > 0) {
      std::cout << std::endl << "**** Average response time: " << std::chrono::duration_cast<std::chrono::milliseconds>(total_time/count) << std::endl;
    } else {
      std::cout << std::endl << "**** No attempts." << std::endl;
    }
  =}
}

main reactor {
  delay = new RandomDelay()
  keyboard = new KeyboardInput()
  logic = new GameLogic()

  logic.request_prompt -> delay.in
  delay.out -> logic.prompt
  keyboard.enter -> logic.enter
  keyboard.quit -> logic.quit
}
