/**
 * This Lingua Franca program sets up a simple HTTP server that listens on port 8000 and responds to
 * incoming requests. On startup, the server is created and starts listening for incoming
 * connections. When a request is received, it is scheduled as a physical action, which triggers a
 * reaction that writes a response back to the client. This response includes a count of the number
 * of requests processed so far, incremented each time a new request is received. The program also
 * ensures proper cleanup on shutdown by closing the server. This reactor serves as a basic example
 * of how to integrate network interactions within the Lingua Franca framework.
 */
target TypeScript {
  // logging : "debug"
  // timeout : 10 sec
  keepalive: true
}

main reactor {
  preamble {=
    import * as https from "https"
    import * as http from "http"
  =}
  state count: number = 0
  state server: {= http.Server | undefined =} = {= undefined =}
  physical action serverRequest: {= [ http.IncomingMessage, http.ServerResponse ] =}

  reaction(startup) -> serverRequest {=
    let options = {};
    server = http.createServer(options, (req : http.IncomingMessage, res : http.ServerResponse) => {
      // Generally browsers make two requests, the first is for favicon.ico.
      // See https://stackoverflow.com/questions/11961902/nodejs-http-createserver-seems-to-call-twice
      if (req.url != "/favicon.ico") {
        actions.serverRequest.schedule(0, [req, res])
      }
    }).listen(8000);
  =}

  reaction(serverRequest) {=
    let requestArray = serverRequest;
    if (requestArray) {
      let req = requestArray[0];
      let res = requestArray[1];
      res.writeHead(200);
      count++;
      res.write("ping count: " + count + "\n");
      res.end("hello world\n");
    }
  =}

  reaction(shutdown) {=
    if (server) {
      server.close();
    }
  =}
}
