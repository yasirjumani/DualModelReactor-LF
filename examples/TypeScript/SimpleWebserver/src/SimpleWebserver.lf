/**
 * This Lingua Franca program creates a simple web server that responds to HTTP requests. Upon
 * startup, the server is initiated and begins to listen on port 8000. When an HTTP request is
 * received that is not for the favicon.ico file, the server schedules a reaction that processes the
 * request and sends a response with the message "Hello world!". This program efficiently handles
 * incoming requests and performs the necessary actions in response to each request. The server
 * stops and closes upon the shutdown of the program.
 */
target TypeScript {
  keepalive: true
}

main reactor {
  preamble {=
    import * as http from "http"
  =}
  state server: {= http.Server | undefined =} = {= undefined =}
  physical action serverRequest: {= [http.IncomingMessage, http.ServerResponse] =}

  reaction(startup) -> serverRequest {=
    let options = {};
    server = http.createServer(options, (req : http.IncomingMessage, res : http.ServerResponse) => {
      // Generally, browsers make two requests; the first is for favicon.ico.
      // See https://stackoverflow.com/questions/11961902/nodejs-http-createserver-seems-to-call-twice
      if (req.url != "/favicon.ico") {
        actions.serverRequest.schedule(0, [req, res])
      }
    }).listen(8000);
    console.log("Started web server at http://localhost:8000/")
  =}

  reaction(serverRequest) {=
    let requestArray = serverRequest;
    if (requestArray) {
      let req = requestArray[0];
      let res = requestArray[1];
      res.writeHead(200);
      res.end("Hello world!\n");
    }
  =}

  reaction(shutdown) {=
    if (server) {
      server.close();
    }
  =}
}
