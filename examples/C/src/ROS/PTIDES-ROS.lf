/**
 * This is an example of exchanging messages between reactors using ROS2. This version uses a 25
 * msec delay to demonstrate the usage of PTIDES to conserve message timestamp sent over the ROS2
 * network.
 *
 * There is a MessageGenerator reactor that publishes String messages on 'topic' and a
 * MessageReceiver reactor that subscribes to 'topic'.
 *
 * 1- To get this example working, install full ROS 2 desktop
 * ('https://index.ros.org/doc/ros2/Installation/Foxy/').
 *
 * Please note that 'colcon' should also be installed. See
 * 'https://index.ros.org/doc/ros2/Tutorials/Colcon-Tutorial/' for more details.
 *
 * 2- Follow the instruction in
 * https://index.ros.org/doc/ros2/Tutorials/Writing-A-Simple-Cpp-Publisher-And-Subscriber/
 * **section 1** to create a 'cpp_pubsub' package in the current (example/ROS) folder.
 *
 * 3- Follow section 2.2 and 2.3 to modify the CMakeLists.txt and package.xml.
 *
 * 4- Replace the default C++14 standard in CMakeLists.txt (i.e., set(CMAKE_CXX_STANDARD 14)) with:
 *
 * # Default to C++20 if(NOT CMAKE_CXX_STANDARD) set(CMAKE_CXX_STANDARD 20) endif()
 *
 * 5- Add the following lines to CMakeLists.txt:
 *
 * add_compile_definitions(NUMBER_OF_WORKERS=4)
 *
 * add_library(platform_support src/core/platform/lf_linux_support.cpp)
 *
 * add_executable(talker src/PTIDES-ROS.cpp)
 *
 * target_link_libraries(talker platform_support)
 *
 * install(TARGETS platform_support DESTINATION lib )
 *
 * 6- Use lfc (in bin/) to compile the provided .lf file
 *
 * lfc PTIDES-ROS.lf
 *
 * 7- Run the provided build-ROS-node.sh:
 *
 * ./build-ROS-node.sh PTIDES-ROS cpp_pubsub
 *
 * This will create a 'talker' node in the package cpp_pubsub (these names can be changed in
 * CMakeLists.txt and in the argument to build-ROS-node.sh).
 *
 * 7- Source the appropriate setup.bash and run the node:
 *
 * source cpp_pubsub/install/setup.bash ros2 run cpp_pubsub talker
 */
target C {
  keepalive: true,
  no-compile: true
}

preamble {=
  #include <functional>
  #include <memory>
  #include <string>
  #include <iostream>

  #include "rclcpp/rclcpp.hpp"
  #include "std_msgs/msg/int64.hpp"
=}

reactor MessageGenerator {
  preamble {=
    class MinimalPublisher : public rclcpp::Node {
      public:
        MinimalPublisher()
        : Node("minimal_publisher")
        {
          publisher_ = this->create_publisher<std_msgs::msg::Int64>("topic", 10);
        }

        rclcpp::Publisher<std_msgs::msg::Int64>::SharedPtr publisher_;
    };
  =}
  state minimal_publisher: {= std::shared_ptr<MinimalPublisher> =}
  state i: int = 0
  timer t(0, 500 msec)

  reaction(startup) {=
    // std::cout << "Executing startup." << std::endl;
    char *argv[] = {(char*)"BasicROSPub", NULL};
    rclcpp::init(1, argv);
    self->minimal_publisher = std::make_shared<MinimalPublisher>();
  =}

  reaction(t) {=
    auto message = std_msgs::msg::Int64();
        // std::cout << "Executing timer reaction." << std::endl;
        message.data = lf_time_logical() + MSEC(25); // Add a 25 msec delay
        // RCLCPP_INFO(self->minimal_publisher->get_logger(),
        //      "Sender publishing: '%lld'", message.data);
        self->minimal_publisher->publisher_->publish(message);
        rclcpp::spin_some(self->minimal_publisher);
        // std::cout << "Done executing timer reaction." << std::endl;
  =}

  reaction(shutdown) {=
    std::cout << "Executing shutdown reaction." << std::endl;
    rclcpp::shutdown();
  =}
}

reactor MessageReceiver {
  preamble {=
    class MinimalSubscriber : public rclcpp::Node {
      public:
        MinimalSubscriber(void* physical_action)
        : Node("minimal_subscriber"), physical_action_(physical_action) {
          subscription_ = this->create_subscription<std_msgs::msg::Int64>(
          "topic", 10, std::bind(&MinimalSubscriber::topic_callback, this, std::placeholders::_1));
        }

      private:
        void topic_callback(const std_msgs::msg::Int64::SharedPtr msg) const {
          // writable_string[msg->data.length()] = '\0'; // Terminate with 0
          // RCLCPP_INFO(this->get_logger(), "I heard: '%lld'", msg->data);
          // std::cout << "At tag (" << lf_time_logical_elapsed() << ","
          //      << lf_tag().microstep << ") calling schedule_copy with value "
          //      << msg->data  << "." << std::endl;
          lf_schedule_copy(physical_action_, 0, &(msg->data), sizeof(instant_t));
          // std::cout << "Done calling schedule_value." << std::endl;
        }
        rclcpp::Subscription<std_msgs::msg::Int64>::SharedPtr subscription_;
        void* physical_action_;
    };
  =}
  physical action ros_message_a: instant_t
  logical action ros_message_l
  state minimal_subscriber: {= std::shared_ptr<MinimalSubscriber> =}

  timer t(0, 5 msec)

  reaction(startup) -> ros_message_a {=
    // std::cout << "Executing startup." << std::endl;
    self->minimal_subscriber = std::make_shared<MinimalSubscriber>(ros_message_a);
  =}

  reaction(ros_message_a) -> ros_message_l {=
    // std::cout << "Physical action triggered." << std::endl;
    // printf("Received: %lld.\n", ros_message_a->value);
    lf_schedule(ros_message_l, ros_message_a->value - lf_time_logical());
  =}

  reaction(ros_message_l) {=
    printf("PTIDES reaction called at tag (%lld, %u).\n",
         lf_time_logical_elapsed(),
         lf_tag().microstep);
  =}

  reaction(t) {=
    rclcpp::spin_some(self->minimal_subscriber);
    // std::cout << "Timer triggered." << std::endl;
  =}

  reaction(shutdown) {=
    // std::cout << "Executing shutdown reaction." << std::endl;
    rclcpp::shutdown();
  =}
}

main reactor {
  sender = new MessageGenerator()
  receiver = new MessageReceiver()
}
