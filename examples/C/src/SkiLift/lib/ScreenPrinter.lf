/** @author Cheng Yen, Tsai */
target C

preamble {=
  #define WIDTH 80      // Width of the terminal screen
  #define HEIGHT 6      // Number of rows for the ski lift
  #define NUM_CHAIRS 10 // Number of ski lift chairs
  #define ANIMATION_HEIGHT 13
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
  #include <unistd.h>
  #include <signal.h>
=}

reactor ScreenPrinter {
  preamble {=
    void moveCursor(int32_t row, int32_t col) {
      // Move cursor to (row, col)
      fprintf(stdout, "\033[%d;%dH", row, col);
      fflush(stdout);
    }
    void clearScreen() {
      fprintf(stdout, "\033[H\033[J"); // ANSI escape code to clear the screen
      fflush(stdout);
    }
    void clearLine() {
      fprintf(stdout, "\033[2K"); // Clear the entire line
      fflush(stdout);
    }


    void drawSkiLift(int32_t offset) {
      char screen[HEIGHT][WIDTH];

      // Clear the screen array
      for (int32_t i = 0; i < HEIGHT; i++) {
        memset(screen[i], ' ', WIDTH - 1);
        screen[i][WIDTH - 1] = '\0';
      }

      // Draw the top row of chairs
      for (int32_t i = 0; i < NUM_CHAIRS; i++) {
        int32_t pos = (i * 8 + offset) % WIDTH;
        if (pos + 1 > 4 && pos + 1 < WIDTH - 10) {
          screen[0][pos] = '-';
          screen[0][pos + 1] = 'o';
          screen[0][pos + 2] = '-';
          screen[1][pos] = '/';
          screen[1][pos + 1] = '|';
          screen[1][pos + 2] = '\\';
        }
      }

      // Draw the bottom row of chairs
      for (int32_t i = 0; i < NUM_CHAIRS; i++) {
        int32_t pos = (i * 8 - offset + WIDTH) % WIDTH;
        if (pos + 2 > 4 && pos + 2 < WIDTH - 10) {
          screen[HEIGHT - 2][pos] = '-';
          screen[HEIGHT - 2][pos + 1] = 'o';
          screen[HEIGHT - 2][pos + 2] = '-';
          screen[HEIGHT - 1][pos] = '/';
          screen[HEIGHT - 1][pos + 1] = '|';
          screen[HEIGHT - 1][pos + 2] = '\\';
        }
      }

      // Draw the left-most and right-most vertical lines
      for (int32_t i = 0; i < NUM_CHAIRS; i++) {
        int32_t pos_top =
          (i * 8 + offset) % WIDTH;
        int32_t pos_bottom =
          (i * 8 - offset + WIDTH) % WIDTH;

        // Left vertical connection (top to bottom)
        if (pos_top + 1 > 5 && pos_top + 1 < WIDTH - 10) {
          screen[2][1] = '|';
          screen[3][1] = '|';
        }

        // Right vertical connection (bottom to top)
        if (pos_bottom + 2 > 8 && pos_bottom + 2 < WIDTH - 5) {
          screen[2][WIDTH - 6] = '|';
          screen[3][WIDTH - 6] = '|';
        }
      }

      // Print the screen to the terminal
      for (int32_t i = 0; i < HEIGHT; i++) {
        fprintf(stdout, "%s\n", screen[i]);
      }
    }

    void skiLiftInit(int32_t offset) {
      clearScreen();
      fprintf(stdout, "Ski Lift Animation\n");
      fprintf(stdout,
          "---------------------------------------------------------------------"
          "-------\n\n\n");
      drawSkiLift(offset);
      fprintf(stdout, "\n\n");
      fprintf(stdout,
          "---------------------------------------------------------------------"
          "-------\n");
      //offset = (offset + 1) % WIDTH;
    }
    void skiLiftUpdate(int32_t offset) {
      for (int32_t i = HEIGHT + 3 - 1; i > 0; i--) {
        moveCursor(i + 4, 1);
        clearLine();
      }
      drawSkiLift(offset);
      fprintf(stdout, "\n\n");
      fprintf(stdout,
          "---------------------------------------------------------------------"
          "-------\n");
      //offset = (offset + 1) % WIDTH;
    }
    void printMotionStatus(string str_motion) {
      moveCursor(ANIMATION_HEIGHT + 1, 1);
      clearLine();
      fprintf(stdout, "Lift Status: %s\n", str_motion);
      fflush(stdout);
    }
    void printGateStatus(string str_gate) {
      moveCursor(ANIMATION_HEIGHT + 2, 1);
      clearLine();
      fprintf(stdout, "Gate Status: %s\n", str_gate);
      fflush(stdout);
      moveCursor(ANIMATION_HEIGHT + 3, 1);
      fprintf(stdout, "\033[J");
      fflush(stdout);
    }
  =}
  input offset: int32_t
  input motion_msg: string
  input gate_msg: string

  reaction(offset) {=
    if (offset->value == 0) {
      skiLiftInit(offset->value);
    } else {
      skiLiftUpdate(offset->value);
    }
  =}

  reaction(motion_msg) {=
    printMotionStatus(motion_msg->value);
  =}

  reaction(gate_msg) {=
    printGateStatus(gate_msg->value);
  =}
}
