/**
 * Demo program illustrating the architecture of a distributed resource management problem like that
 * described in:
 *
 * Lamport, L. (1984). "Using Time Instead of Timeout for Fault-Tolerant Distributed Systems." ACM
 * Transactions on Programming Languages and Systems 6(2): 254-280.
 *
 * The goal is distributed first-come, first-served exclusive access to a shared resource.
 *
 * Each instance of Client is initially idle for a time given by its `idle_time` parameter. It then
 * requests exclusive access to the resource by sending a `request` message to its local instance of
 * ResourceManager. If the resource is available, then the ResourceManager immediately replies with
 * a `grant` message. The Client will then hold the resource for an amount of time given by its
 * `use_time` parameter, after which it will send a `release` message to the ResourceManager. If the
 * resource is not available when the Client requests it, then the ResourceManager queues the
 * request and sends the `grant` message when the resource becomes available.
 *
 * Each instance of ResourceManager maintains a copy of the queue of pending requests to the
 * resource. The entries in the queue are ordered by tag (logical time and microstep) so that they
 * will be granted using a first-come, first-served policy. If two requests are made simultaneously
 * (with the same tag), then they will be granted access in order of their IDs.
 *
 * At all logical tags, every instance of ResourceManager should have exactly the same queue
 * contents. Hence, at every tag, all ResourceManagers agree on which manager has access to the
 * resource. It is the manager at the head of their queue.
 *
 * @author Edward A. Lee
 */
target C {
  timeout: 1 sec
}

import Platform from "ResourceManagement.lf"

federated reactor FederatedResourceManagement(num_other_resource_managers: int = 1) {
  // Each platform needs a unique id that is between 0 and QUEUE_SIZE-1.
  a = new Platform(
      idle_time = 50 msec,
      use_time = 60 msec,
      name = "San Francisco",
      id=0,
      num_other_resource_managers=num_other_resource_managers)
  b = new Platform(
      idle_time = 200 msec,
      use_time = 40 msec,
      name="Berkeley",
      id=1,
      num_other_resource_managers=num_other_resource_managers)
  b.request -> a.remote_request
  b.release -> a.remote_release
  a.request -> b.remote_request
  a.release -> b.remote_release
}
