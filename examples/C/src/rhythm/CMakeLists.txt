# This is a cmake build script providing an alternative solution for compiling
# the Rhythm example in this directory..
#
# Usage:
#
# The following commands assume that your current working directory is
# ''example/C' within the LF repository. To build the Rhythm example, first
# generate the sources with lfc. To compile with cmake, run the following
# commands:
#
# $> mkdir build && cd build
# $> cmake -DLF_SOURCE_GEN_DIRECTORY=../src-gen/Rhythm/Rhythm ../src/Rhythm/
# $> make
#
# This create a binary Rhythm in the current working directory. Note that the
# build directory can be created anywhere in the file system. Only the paths
# provided to the call to cmake need to be adjusted accordingly

cmake_minimum_required(VERSION 3.12)
project(Rythm VERSION 1.0.0 LANGUAGES C)

# check which system we are running on to select the correct platform support
# file and assign the file's path to LF_PLATFORM_FILE
if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
  set(LF_PLATFORM_FILE "${LF_SOURCE_GEN_DIRECTORY}/core/platform/lf_linux_support.c")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
  set(LF_PLATFORM_FILE "${LF_SOURCE_GEN_DIRECTORY}/core/platform/lf_macos_support.c")
else()
  message(FATAL_ERROR "Your platform is not supported!")
endif()

# declare a new executable target and list all its sources
add_executable(Rhythm "${LF_SOURCE_GEN_DIRECTORY}/Rhythm.c" "${LF_PLATFORM_FILE}")

# set the number of workers to 2
target_compile_definitions(Rhythm PUBLIC NUMBER_OF_WORKERS=2)

# The above code could be generated by the c code generator
####################################################################################
# The below code could be provided by the user in a cmake include file. The C++
# target uses the `cmake-include` target property for this purpose

# find pthreads and link to it
find_package(Threads REQUIRED)
target_link_libraries(Rhythm Threads::Threads)

# find curses and link to it
find_package(Curses REQUIRED)
# the find function of curses does not define a convenient target as for threads
# above. Thus, wee need to configure the include dir and libraries individually.
target_include_directories(Rhythm PUBLIC ${CURSES_INCLUDE_DIR})
target_link_libraries(Rhythm ${CURSES_LIBRARIES})

if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
  # If on linux, then find and link to alsa
  find_package(ALSA REQUIRED)
  target_link_libraries(Rhythm ALSA::ALSA)
else()
  # on Mac OS, we find and link to AudioToolbox and CoreFoundation instead
  find_library(AudioToolbox "AudioToolbox")
  find_library(CoreFoundation "CoreFoundation")
  target_link_libraries(Rhythm ${AudioToolbox} ${CoreFoundation})
endif()
