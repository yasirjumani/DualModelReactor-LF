/**
 * Generate two Poisson processes, one with a fixed seed and the other using the default seed. The
 * one with the fixed seed will produce repeatable outputs. A third random process is generated
 * using the RandomDelay reactor.
 *
 * This demonstrates the use of the PoissonClock and RandomDelay reactors.
 *
 * @author Edward A. Lee
 */
target C {
  timeout: 5 sec
}

import PoissonClock from "../lib/PoissonClock.lf"
import RandomDelay from "../lib/RandomDelay.lf"

main reactor {
  non_repeatable = new PoissonClock()
  repeatable = new PoissonClock(seed=1)
  delay = new RandomDelay()

  reaction(non_repeatable.event, repeatable.event) {=
    double seconds = ((double)lf_time_logical_elapsed())/SEC(1);
    if (non_repeatable.event->is_present) {
      lf_print("non_repeatable event at time %f seconds", seconds);
    }
    if (repeatable.event->is_present) {
      lf_print("repeatable event at time %f seconds", seconds);
    }
  =}

  reaction(startup, delay.out) -> delay.in {=
    lf_set(delay.in, lf_time_logical_elapsed());
    if(delay.out->is_present) {
      double seconds = ((double)lf_time_logical_elapsed())/SEC(1);
      lf_print("-- using RandomDelay, event at time %f seconds", seconds);
    }
  =}
}
