/**
 * Example that demonstrates the detection of deadline misses. This program models a sensor, some
 * work done on the sensor data, and an actuator with a deadline. The sensor is your keyboard Return
 * or Enter button. The work that is done is simulated every second time to take more than 500
 * microseconds (by sleeping for 500 usecs). Hence, you should see that deadline is missed every
 * second time you hit Return.
 *
 * @author Edward A. Lee
 */
target C {
  keepalive: true
}

preamble {=
  #include <unistd.h>
  #include "platform.h" // Defines PRINTF_TIME and thread functions
=}

reactor Sensor {
  preamble {=
    void* read_input(void* response) {
      int c;
      while(1) {
        while((c = getchar()) != '\n') {
          if (c == EOF) {
            lf_request_stop();
            break;
          }
        }
        lf_schedule(response, 0);
        if (c == EOF) {
          break;
        }
      }
      return NULL;
    }
  =}

  physical action response
  output y: bool

  reaction(startup) -> response {=
    lf_thread_t thread_id;
    lf_thread_create(&thread_id, &read_input, response);
    printf("Press Enter to produce a sensor value.\n");
  =}

  reaction(response) -> y {=
    printf("Reacting to physical action at %lld\n", lf_time_logical_elapsed());
    lf_set(y, true);
  =}
}

reactor Analysis {
  input x: bool
  output y: bool
  state do_work: bool = false

  reaction(x) -> y {=
    if (self->do_work) {
      printf("Working for 500 ms...\n");
      usleep(500);
    } else {
      printf("Skipping work!\n");
    }
    self->do_work = !self->do_work;
    lf_set(y, true);
  =}
}

reactor Actuator {
  input x: bool

  reaction(x) {=
    instant_t l = lf_time_logical_elapsed();
    instant_t p = lf_time_physical_elapsed();
    lf_print("Actuating... Logical time: " PRINTF_TIME
        ". Physical time: " PRINTF_TIME ". Lag: " PRINTF_TIME,
        l, p, p-l);
  =} deadline(500 usecs) {=
    instant_t d = lf_time_physical_elapsed()
        - lf_time_logical_elapsed();
    lf_print("***** Deadline missed! Lag: " PRINTF_TIME
        " (too late by " PRINTF_TIME " nsecs)",
        d, d-500000);
  =}
}

main reactor {
  sense = new Sensor()
  analyze = new Analysis()
  actuate = new Actuator()
  sense.y -> analyze.x
  analyze.y -> actuate.x
}
