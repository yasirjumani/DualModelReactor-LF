/**
 * This program is a simple federated chat application written in Lingua Franca (LF) for two users,
 * represented by two instances of the `ChatHandler` reactor, `a` and `b`. Each `ChatHandler`
 * consists of an `InputHandler` and a `Printer`. The `InputHandler` is responsible for receiving
 * user input from the console and sending it as a message. When the user enters a message, the
 * `InputHandler` reads it, prints it, and then sends it via its `out` port. The message then gets
 * relayed by the `ChatHandler` via its `send` port. On the receiving side, the `ChatHandler`
 * directs the incoming message through its `receive` port to the `Printer` reactor, which prints
 * the received message. This process creates a two-way communication where `a` and `b` can send and
 * receive messages from each other.
 *
 * @author Byeonggil Jun (junbg@hanyang.ac.kr)
 * @author Hokeun Kim (hokeunkim@berkeley.edu)
 */
target C {
  keepalive: true,
  coordination-options: {
    advance-message-interval: 10 msec
  }
}

preamble {=
  #include <string.h>
  #include <unistd.h>
=}

reactor InputHandler {
  preamble {=
    // Global buffer.
    char buf[256];
    void* read_input(void* response) {
      int c;
      int i = 0;
      while(1) {
        printf("Press Enter a message.\n");
        while((c = getchar()) != '\n') {
          buf[i++] = c;
          if (c == EOF) {
            lf_request_stop();
            break;
          }
        }
        buf[i] = 0;
        printf("User input: %s\n", buf);
        i = 0;

        char* ptr = buf;
        // The following copies the char*, not the string.
        lf_schedule_copy(response, 0, &ptr, 1);
        if (c == EOF) {
          break;
        }
      }
      return NULL;
    }
  =}

  physical action response: string
  output out: string

  reaction(startup) -> response {=
    lf_thread_t thread_id;
    lf_thread_create(&thread_id, &read_input, response);
  =}

  reaction(response) -> out {=
    printf("Reacting to physical action at %lld\n", lf_time_logical_elapsed());
    lf_set(out, response->value);
  =}
}

reactor Printer {
  input in: string

  reaction(in) {=
    printf("Received: %s\n", in->value);
  =}
}

reactor ChatHandler {
  input receive: string
  output send: string
  u = new InputHandler()
  r = new Printer()

  reaction(u.out) -> send {=
    lf_set(send, u.out->value);
  =}

  reaction(receive) -> r.in {=
    lf_set(r.in, receive->value);
  =}
}

federated reactor SimpleChat {
  a = new ChatHandler()

  b = new ChatHandler()
  b.send -> a.receive
  a.send -> b.receive
}
