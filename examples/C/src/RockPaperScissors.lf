/**
 * Demonstration of the classic rock-paper-scissors game. See
 * [https://en.wikipedia.org/wiki/Rock_paper_scissors]. This illustrates interactive feedback in
 * Lingua Franca and the importance of reaction order. If you reorder the second and third reactions
 * in the Player reactor, a causality loop emerges.
 *
 * @author Marten Lohstroh
 */
target C

preamble {=
  typedef enum {paper=0, rock=1, scissors=2} symbol_t;
=}

main reactor RockPaperScissors {
  player1 = new Player(id=1)
  player2 = new Player(id=2)

  player1.reveal -> player2.observe
  player2.reveal -> player1.observe
}

reactor Player(id: char = 0) {
  preamble {=
    const char* symbol_names[] = {"paper", "rock", "scissors"};
  =}

  input observe: symbol_t
  output reveal: symbol_t
  logical action repeat(1 sec)

  state choice: symbol_t

  reaction(startup) {=
    // Seed the random number generator.
    // Use the ID to ensure each player has a different seed.
    srand((unsigned) lf_time_logical() / self->id);
  =}

  reaction(startup, repeat) -> reveal {=
    self->choice = rand() % 3;
    lf_set(reveal, self->choice);
    printf("Player %d chose '%s'\n", self->id, symbol_names[self->choice]);
  =}

  reaction(observe) -> repeat {=
    if (observe->value == self->choice) {
      printf("Player %d declares a tie.\n", self->id);
      lf_schedule(repeat, 0);
    } else if (observe->value == (self->choice + 1) % 3) {
      printf("Player %d won!\n", self->id);
    }
  =}
}
