/**
 * This Lingua Franca program interfaces with the Robot Operating System (ROS) to periodically
 * publish messages on a specific topic using the MinimalPublisher class from the ROS py_pubsub
 * package. The program initializes ROS communication and creates an instance of MinimalPublisher
 * upon startup. Using a timer, it generates and publishes a new "Hello World" message every 500
 * milliseconds, incrementing a counter with each message. The message is output to the defined
 * topic for consumption by other systems or processes. On shutdown, the program destroys the node
 * and shuts down ROS communication, ensuring a clean exit. This program showcases the utility of
 * Lingua Franca in enabling deterministic, real-time communication in robotics applications using
 * ROS.
 */
# Sender.lf
target Python

preamble {=
  # Locate the MinimalPublisher class written for ROS
  # After source the ros package,
  # Python import would be:
  # from [package name].[file name] import [class name]
  from py_pubsub.publisher_member_function import MinimalPublisher

  # copy and paste all imports from python file to here
  import rclpy
  from rclpy.node import Node
  from std_msgs.msg import String
=}

reactor Sender {
  state minimal_publisher
  timer t(0, 500 ms)
  output topic

  reaction(startup) {=
    rclpy.init(args=None)
    self.minimal_publisher = MinimalPublisher()

    # rclpy.spin is commented out.
    #rclpy.spin(self.minimal_publisher)
  =}

  reaction(t) -> topic {=
    # Copy and paste the timer callback implementation
    # from ROS to Lingua Franca,
    # and replace the ROS publish method with Lingua Franca

    msg = String()
    msg.data = "Hello World: " + str(self.minimal_publisher.i)
    topic.set(msg)
    print("[LF] Publishing: " + str(msg.data))
    self.minimal_publisher.i += 1
  =}

  reaction(shutdown) {=
    self.minimal_publisher.destroy_node()
    rclpy.shutdown()
  =}
}
