/**
 * Video capture and playback example using OpenCV with the camera driving the timing. Please see
 * README.md for instructions.
 */
target Python {
  keepalive: true,
  single-threaded: true  # OpenCV crashes if we use the multithreaded version.
}

import Display from "Video.lf"

preamble {=
  import cv2
=}

/**
 * Produce a sequence of frames as they are delivered by the camera. This version uses blocking
 * reads to read a video frame and starts the read shortly after completing the previous read. This
 * version should only be used in programs where the camera frames drive everything because the
 * WebCamAsync will block until it gets a camera frame.
 *
 * @param webcam_id The ID of the camera (default 0).
 * @param offset Time until frames start to be captured.
 * @param frames_per_second The number of frames per second to set the camera to.
 */
reactor WebCamAsync(webcam_id=0, offset = 0 s, frames_per_second=30) {
  input trigger
  output camera_frame

  timer start(offset)
  state stream

  reaction(start) -> camera_frame {=
    self.stream = cv2.VideoCapture(self.webcam_id, cv2.CAP_ANY)
    if (self.stream.isOpened() is not True):
      sys.stderr.write("Error: Failed to open the camera.\n")
      exit(1)

    self.stream.set(cv2.CAP_PROP_FPS, self.frames_per_second)

    # Read the first frame. This is a blocking read.
    ret, frame = self.stream.read()
    if ret is True:
      camera_frame.set(frame)
    else:
      print("Warning, failed to get first frame.")
  =}

  reaction(trigger) -> camera_frame {=
    # Read a frame. This is a blocking read.
    ret, frame = self.stream.read()
    if ret is True:
      camera_frame.set(frame)
    else:
      print("Warning, failed to get first frame.")
  =}

  reaction(shutdown) {=
    self.stream.release()
  =}
}

main reactor {
  webcam = new WebCamAsync()
  display = new Display()
  webcam.camera_frame -> display.frame
  webcam.camera_frame ~> webcam.trigger
}
