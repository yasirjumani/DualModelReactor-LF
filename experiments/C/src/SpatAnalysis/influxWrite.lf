/**
 * This Lingua Franca (LF) program is designed to interact with an InfluxDB database and process
 * event trace data. Upon startup, the program checks if the specified database exists and creates
 * it if necessary. Then, it reads a trace file line by line, processing and extracting event
 * information. The program writes the processed data as points to the InfluxDB database. Upon
 * shutdown, the program queries the database for the last 10 records, sorted by descending
 * timestamp, and prints the results to the console. This LF program demonstrates how to work with
 * time-series data and interact with InfluxDB using the Influx package in TypeScript.
 */
target TypeScript

/**
 * Uses another package @
 * https://github.com/node-influx/node-influx/tree/master/examples/express_response_times
 */
main reactor {
  preamble {=
    // @ts-ignore
    import * as Influx from "influx";
    import * as os from "os";

    import * as fs from "fs";
    import * as path from "path";

    const databaseName = "LF_EVENTS";
    const measurementName = "event_times";
    const traceFilePath = "../../my_trace";


    const influx = new Influx.InfluxDB({
      host: "localhost",
      database: databaseName,
      schema: [
      {
        measurement: measurementName,
        fields: {
        message_id: Influx.FieldType.INTEGER,
        sender_lts: Influx.FieldType.FLOAT,
        receiver_lts: Influx.FieldType.FLOAT,
        logical_latency: Influx.FieldType.INTEGER,
        sender_pts: Influx.FieldType.FLOAT,
        receiver_pts: Influx.FieldType.FLOAT,
        physical_latency: Influx.FieldType.INTEGER,
        residual: Influx.FieldType.INTEGER,
        phase: Influx.FieldType.INTEGER,
        deadline_miss: Influx.FieldType.INTEGER,
        },
        tags: []
      },
      ],
    });
  =}

  timer t(0, 0 msec)

  reaction(startup) {=
    influx
      .getDatabaseNames()
      // @ts-ignore
      .then((names) => {
      if (!names.includes(databaseName)) {
        return influx.createDatabase(databaseName);
      }
      })
      .then(() => {
        console.log("Created new database if not exists");

      })
      // @ts-ignore
      .catch((err) => {
      console.error(`Error creating Influx database!`);
      });
  =}

  reaction(t) {=
    let fieldRecord: {[key:string] : number} = {};

    var lines;
    try {

        const data = fs.readFileSync(path.resolve(__dirname, traceFilePath), "utf8")
        lines = data.split(/\r?\n/);


      lines.forEach((line) => {
        if(line.indexOf("EVENT") < 0){
          return;
        }
        var mod_line = line.replace("EVENT: ", "");
        var split_line = mod_line.split(": ");
        //console.log(split_line);
        var _timestamp = "";
        if(split_line[0] == "sender_pts")
          _timestamp = split_line[1];
        fieldRecord[split_line[0]] = parseInt(split_line[1]);
        if(split_line[0] == "deadline_miss"){
           influx
            .writePoints([
            {
              measurement: measurementName,
               tags: {},
               fields: fieldRecord,
               timestamp: _timestamp,
            },
            ])
            // @ts-ignore
            .catch((err) => {
            console.error(`Error saving data to InfluxDB! ${err.stack}`);
            });
        }
      });
    } catch (err) {
        console.error(err)
    }
  =}

  reaction(shutdown) {=
    influx
      .query(
        `
      select * from measurementName
      where host = ${Influx.escape.stringLit(os.hostname())}
      order by time desc
      limit 10
          `
      )
      // @ts-ignore
      .then((result) => {
        console.log(result);
      })
      // @ts-ignore
      .catch((err) => {
        console.log(err.stack);
     });
  =}
}
