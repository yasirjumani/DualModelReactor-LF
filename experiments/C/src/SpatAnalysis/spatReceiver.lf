/**
 * Example PTIDES application for connected vehicle application Demo Tile: RSU Coordinated Speed
 * alignment This is the vehicle side application that
 * - Requests RSU side application to provide speed recommendations based on its SPAT
 * - Uses MQTT pub/sub
 * @author Ravi Akella
 */
target C {
  single-threaded: true,  // Must use single-threaded implementation so lf_schedule is thread safe.
  compiler-flags: "-I/usr/local/include -L/usr/local/lib -g -lpaho-mqtt3c src-gen/core/util.c ",
  timeout: 60 secs,
  keepalive: true
}

import MQTTSubscriber from "MQTTSubscriber.lf"

/**
 * Reactor that prints an incoming string.
 * @param prefix A prefix for the message.
 * @input message The message.
 */
reactor recvSpatMessage {
  preamble {=
    #define BILLION 1000000000LL
      typedef struct spat_status{
        int signal_phase; //integer code for signal 1-Red, 2-Green, 3-Yellow
        long long unsigned residual; // remaining time for phase change
      } spat_status;
  =}

  input message: spat_status*

  reaction(message) {=
    printf("Received Phase=\"%d\", residual=%llu.\n",
      message->value->signal_phase, message->value->residual
    );
  =}
}

reactor recvSpatMessage2 {
  input message: char*
  state signal_phase: int = 0
  state residual: time = 0 nsec

  reaction(message) {=
    /*printf("PrintMessage: At (elapsed) time %lld, subscriber receives: %s\n",
      lf_time_logical_elapsed(),
      message->value
    );*/

    sscanf(message->value, "%d %llu", &self->signal_phase, &self->residual);
    printf("EVENT: residual: %llu\n", self->residual);
    printf("EVENT: phase: %d\n", self->signal_phase);
    printf("spatReceiver: At phy time %lld, Phase:%d residual:%llu nsec.\n", lf_time_physical(), self->signal_phase, self->residual);
  =} deadline(10 msec) {=
    printf("EVENT: deadline_miss: true\n");
  =}
}

/**
 * Reactor that prints an incoming string.
 * @param prefix A prefix for the message.
 * @input message The message.
 */
reactor PrintMessage {
  input message: char*

  reaction(message) {=
    printf("PrintMessage: At (elapsed) time %lld, subscriber receives: %s\n",
      lf_time_logical_elapsed(),
      message->value
    );
  =}
}

main reactor spatReceiver {
  rsuMsg = new recvSpatMessage2()
  sub = new MQTTSubscriber(
      address="tcp://localhost:1883",  // address = "tcp://host.docker.internal:1883",
      clientID = "Vehicle 760",
      topic="spat/rsu101",
      offset = 10 msec)

  sub.message -> rsuMsg.message
}
