/**
 * This Lingua Franca (LF) program simulates a digital control system with a feedback loop between a
 * physical plant, a controller, and a planner. The physical plant periodically sends sensor data
 * and computes latencies based on control inputs, also alerting when a certain synchronization
 * tolerance property (STP) is violated. The controller, which receives the sensor data,
 * communicates with the planner before sending control signals back to the physical plant, skipping
 * the first control action. The planner, upon receiving a request, takes some time to respond with
 * the same value as the request. The program simulates real-time control mechanisms common in
 * industrial automation, robotics, and embedded systems, including latency measurements and STP
 * checks.
 */
target C {
  timeout: 1 sec,
  keepalive: true
}

reactor PhysicalPlant {
  preamble {=
    void* my_thread(void* a) {
      while(true) {
        lf_schedule_int(a, 0, 42);
        lf_nanosleep(MSEC(33));
      }
    }
  =}
  input control: double
  output sensor: double
  state last_sensor_time: time = 0
  state previous_sensor_time: time = 0
  state thread_id: lf_thread_t = 0
  physical action a: int

  reaction(startup) -> a {=
    lf_thread_create(&self->thread_id, &my_thread, a);
  =}

  reaction(a) -> sensor {=
    lf_set(sensor, 42);
    self->previous_sensor_time = self->last_sensor_time;
    self->last_sensor_time = lf_time_logical();
  =}

  reaction(control) {=
    instant_t control_time = lf_time_physical();
    lf_print("Latency %lld.", control_time - self->previous_sensor_time);
    lf_print("Logical time: %lld.", lf_time_logical_elapsed());
    lf_print("Lag: %lld.", lf_time_physical_elapsed() - lf_time_logical_elapsed());
  =} STP(33 msec) {=
    lf_print_warning("STP violation.");
  =}
}

reactor Controller {
  input sensor: double
  output control: double

  state latest_control: double = 0.0
  state first: bool = true
  state in_progress: bool = false

  output request_for_planning: double
  input planning: double

  reaction(planning) {=
    self->latest_control = planning->value;
    self->in_progress = false;
  =}

  reaction(sensor) -> control, request_for_planning {=
    if (!self->first) {
      lf_set(control, self->latest_control);
    }
    self->first = false;
    lf_print("******** in_progress: %d", self->in_progress);
    if (!self->in_progress) {
      self->in_progress = true;
      lf_set(request_for_planning, sensor->value);
    }
  =}
}

reactor Planner {
  input request: double
  output response: double

  reaction(request) -> response {=
    lf_nanosleep(MSEC(100));
    lf_set(response, request->value);
  =}
}

main reactor {
  p = new PhysicalPlant()
  c = new Controller()
  pl = new Planner()

  p.sensor -> c.sensor
  c.request_for_planning -> pl.request
  pl.response -> c.planning after 100 msec
  c.control -> p.control
}
