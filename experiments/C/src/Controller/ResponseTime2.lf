/**
 * This Lingua Franca (LF) program represents a real-time control system composed of a physical
 * plant, a controller, and a planner. The physical plant generates sensor data at regular intervals
 * and sends this data to the controller. The controller forwards the sensor data to the planner,
 * which simulates latency through a brief sleep period before sending a response back to the
 * controller. The controller maintains the latest control value received from the planner and sends
 * it back to the physical plant as a control signal after receiving the next sensor data.
 * Additionally, the program calculates and displays the latency between sensor readings and the
 * control signal transmission. It also monitors the Signal Transmission Period (STP) and issues a
 * warning if a violation occurs. Overall, this program simulates a real-time, feedback control
 * system with planning, similar to those found in industrial automation or robotics, while
 * accounting for latency and timing constraints.
 */
target C {
  timeout: 1 sec
}

reactor PhysicalPlant {
  input control: double
  output sensor: double
  timer t(0, 33 msec)
  state last_sensor_time: time = 0
  state previous_sensor_time: time = 0

  reaction(t) -> sensor {=
    lf_set(sensor, 42);
    self->previous_sensor_time = self->last_sensor_time;
    self->last_sensor_time = lf_time_physical();
  =}

  reaction(control) {=
    instant_t control_time = lf_time_physical();
    lf_print("Latency %lld.", control_time - self->previous_sensor_time);
    lf_print("Logical time: %lld.", lf_time_logical_elapsed());
  =} STP(33 msec) {=
    lf_print_warning("STP violation.");
  =}
}

reactor Controller {
  input sensor: double
  output control: double

  state latest_control: double = 0.0
  state first: bool = true

  output request_for_planning: double
  input planning: double

  reaction(planning) {=
    self->latest_control = planning->value;
  =}

  reaction(sensor) -> control, request_for_planning {=
    if (!self->first) {
      lf_set(control, self->latest_control);
    }
    self->first = false;
    lf_set(request_for_planning, sensor->value);
  =}
}

reactor Planner {
  input request: double
  output response: double

  reaction(request) -> response {=
    lf_nanosleep(MSEC(10));
    lf_set(response, request->value);
  =}
}

main reactor {
  p = new PhysicalPlant()
  c = new Controller()
  pl = new Planner()

  p.sensor -> c.sensor
  c.request_for_planning -> pl.request
  pl.response -> c.planning after 0
  c.control -> p.control
}
