target C {
  keepalive: true
}

reactor Display(width: int = 4) {
  input[width] obstacleList: int  // Center/HUD/Cluster indicating direction of obstacle
  output angleOfObstacle: int[]

  reaction(startup) -> angleOfObstacle {=
    for (int i = 0; i < 4; i++) {
      angleOfObstacle->value[i] = 0;
    }
    SET_PRESENT(angleOfObstacle);
  =}

  reaction(obstacleList) -> angleOfObstacle {=
    //TODO: Handling of graphics
      //0 - left front (135)
      //1 - right front (45)
      //2 - left rear (225)
      //3 - right rear (315)
    for (int i = 0; i < angleOfObstacle->length; i++) {
      angleOfObstacle->value[i] = 0;
    }

    for (int i = 0; i < obstacleList_width; i++) {
      if (obstacleList[i]->is_present && obstacleList[i]->value) {

        //lf_set(angleOfObstacle[i], 1);

      lf_sleep(MSEC(100));
      }
    }
  =}
}

reactor Speaker(width: int = 4) {
  input[width] obstacleList: int  // 3D sound generation
  output alert: bool

  reaction(obstacleList) -> alert {=
    //Handling of device audio
    instant_t processing_delay = MSEC(30);
    lf_sleep(processing_delay);

    for (int i = 0; i < obstacleList_width; i++) {
      if (obstacleList[i]->is_present && obstacleList[i]->value){
        lf_set(alert, true);
      }
      else{
        lf_set(alert, false);
      }
    }
  =}
}

reactor DistanceSensor(bank_index: int = 0) {
  timer t(0, 10 ms)
  physical action pa
  output range: int  // in meters

  reaction(t) -> pa {=
    //Schedule scan
    lf_schedule(pa, MSEC(5000));
  =}

  reaction(pa) -> range {=
    int distance = rand() % 25;
    lf_set(range, distance);
  =}
}

reactor Monitor {
  mutable input display_event: int[]
  input speaker_event: bool

  reaction(display_event) {=
    for (int i = 0; i < display_event->length; i++) {
      lf_print("Display: %d", display_event->value[i]);
    }
  =}

  reaction(speaker_event) {=
    lf_print("Speaker: %d", speaker_event->value);
  =}
}

reactor ProcessSignals(width: int = 4) {
  input[width] rangeList: int
  output[width] obstacles: int

  reaction(rangeList) -> obstacles {=
    for (int i = 0; i < rangeList_width; i++) {
      //0 - left front
      //1 - right front
      //2 - left rear
      //3 - right rear
      if (rangeList[i]->is_present){
        if (rangeList[i]->value < 10){
          lf_set(obstacles[i], 1);
        }
        else{
          lf_set(obstacles[i], 0);
        }
      }
    }
  =}
}

main reactor {
  display = new Display()  // speaker = new Speaker()
  ds = new[4] DistanceSensor()
  ps = new ProcessSignals(width=4)
  // ps.obstacles -> display.obstacleList
  // ps.obstacles -> speaker.obstacleList
  // monitor = new Monitor()
  // display.angleOfObstacle -> monitor.display_event
  // speaker.alert -> monitor.speaker_event
  ds.range -> ps.rangeList
}
