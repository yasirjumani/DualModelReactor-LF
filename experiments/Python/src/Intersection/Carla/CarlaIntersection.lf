/**
 * Simulate an intersection scenario using Carla.
 *
 * To run this example, install Carla. Then, use the provided bash script (if applicable) to run
 * Carla.
 *
 * Compile the LF program using lfc:
 *
 * `lfc CarlaIntersection.lf`
 *
 * Locate the generated CarlaIntersection.py and run it:
 *
 * `python3 ../../../src-gen/Intersection/Carla/CarlaIntersection/CarlaIntersection.py`
 *
 * **Note:** This example assumes that Carla is installed in '/opt/carla-simulator'. Please change
 * CARLA_INSTALL_DIR in the preamble to reflect your install location of the simulator.
 */
target Python {
  timeout: 40 sec,
  # fast: true // You can enable fast to get a much faster simulation
  # logging: DEBUG
  files: [
      "ROS/carla_intersection/src/launch_parameters.py",
      "ROS/carla_intersection/src/constants.py"]
}

import Vehicle from "Vehicle.lf"
import RSU from "RSU.lf"
import CarlaSim from "CarlaSim.lf"

preamble {=
  from launch_parameters import SPAWN_POINTS, INITIAL_POSITIONS, INITIAL_VELOCITIES, \
          INTERSECTION_WIDTH, NOMINAL_SPEED_IN_INTERSECTION, INTERSECTION_POSITION
=}

reactor Relay(duration_in_seconds=0) {
  preamble {=
    from time import sleep
  =}
  input i
  output o
  logical action t

  reaction(i) -> t {=
    t.schedule(self.duration_in_seconds, i.value)
  =}

  reaction(t) -> o {=
    o.set(t.value)
  =}
}

main reactor(
    num_entries=4,
    spawn_points = {= SPAWN_POINTS =},
    initial_velocities = {= INITIAL_VELOCITIES =},
    initial_positions = {= INITIAL_POSITIONS =},
    intersection_width = {= INTERSECTION_WIDTH =},
    nominal_speed_in_intersection = {= NOMINAL_SPEED_IN_INTERSECTION =},
    intersection_position = {= INTERSECTION_POSITION =}) {
  carla = new[num_entries] CarlaSim(
      interval = 16 msec,
      initial_velocities=initial_velocities,
      spawn_points=spawn_points)

  vehicle = new[num_entries] Vehicle(
      initial_velocities=initial_velocities,
      initial_positions=initial_positions)

  rsu = new RSU(
      num_entries=num_entries,
      intersection_width=intersection_width,
      nominal_speed_in_intersection=nominal_speed_in_intersection,
      intersection_position=intersection_position)

  carla.velocity -> vehicle.velocity
  carla.position -> vehicle.position
  vehicle.control -> carla.command

  vehicle.request -> rsu.request
  rsu.grant -> vehicle.grant
}
