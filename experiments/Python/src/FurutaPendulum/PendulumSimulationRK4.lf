target Python

/**
 * A simple forward-Euler simulation of a Furuta pendulum, based on the Ptolemy II model constructed
 * by Johan Eker and described in this paper:
 *
 * J. Liu, J. Eker, J. W. Janneck, and E. A. Lee, “Realistic simulations of embedded control
 * systems,” IFAC Proceedings Volumes, vol. 35, no. 1, pp. 391–396, 2002.
 *
 * The Ptolemy II model is more accurate because it uses an RK-45 solver, but this is adequate for
 * many purposes.
 *
 * This outputs its state every `sample_period`. It updates the state before outputting it using the
 * most recently received control input.
 *
 * The `theta` output is the angle of the pendulum, which is 0 when the pendulum is pointing
 * straight up, and `d_theta` is its initial angular velocity. The `phi` output is the angle of the
 * horizontal arm and `d_phi` is its angular velocity.
 *
 * The `u` input is the control input, which applies torque to the arm. The `d` input is an
 * impulsive disturbance applied to the pendulum, as if you were to tap it with a hard object. When
 * an input is received on `d`, its value provides an instantaneous increment or decrement to
 * `d_theta`. Notice that no output is produced when an input is received on `d` unless that input
 * is simultaneous with the sampling period. The effect of the disturbance will not be seen on the
 * outputs until the next sample, as would usually be the case for digital controller.
 *
 * @author Edward A. Lee, Yiwei Yu
 */
preamble {=
  import math
=}

reactor PendulumSimulation(
    initial_theta=-3.14159,  # Initial pendulum angle.
    sample_period = 5 msec,  # Sample period.
    g=9.81,                  # Acceleration of gravity.
    alpha=0.00260569,
    beta=0.05165675,
    gamma=9.7055e-4,
    epsilon=0.08103060) {
  input u         # Control input.
  input d         # Impulsive disturbance

  output theta    # Pendulum angle.
  output d_theta  # Pendulum angular velocity.
  output phi      # Arm angle.
  output d_phi    # Arm angular velocity.

  state x(0.0, 0.0, 0.0, 0.0)
  state first = True
  state latest_u = 0.0
  state elapsed_time = 0

  timer t(0, sample_period)

  # Based on the dynamic model of furuta pendulum,
  # define the differential equations
  method calculate_derivatives(x) {=
    x0_dot = self.x[1]
    x1_dot = (1.0/(
        self.alpha * self.beta
        + math.pow(self.alpha * math.sin(self.x[0]), 2.0)
        - math.pow(self.gamma * math.cos(self.x[0]), 2.0)
      ) * (
        (self.alpha * self.beta + math.pow(self.alpha * math.sin(self.x[0]), 2.0))
        * math.pow(self.x[3], 2.0)
        * math.sin(self.x[0])
        * math.cos(self.x[0])
      -
        math.pow(self.gamma * self.x[1], 2.0)
        * math.sin(self.x[0])
        * math.cos(self.x[0])
      +
        2.0
        * self.alpha
        * self.gamma\
        * self.x[1]
        * self.x[3]
        * math.sin(self.x[0])
        * math.pow(math.cos(self.x[0]), 2.0)
      -
        self.gamma
        * math.cos(self.x[0])
        * self.g
        * self.latest_u
      +
        (self.alpha * self.beta + math.pow(self.alpha * math.sin(self.x[0]), 2.0))
        * self.epsilon / self.alpha * math.sin(self.x[0])
      )
    )
    x2_dot = self.x[3]
    x3_dot = ((1.0 / (
        self.alpha * self.beta
        + math.pow(self.alpha * math.sin(self.x[0]), 2.0)
        - math.pow(self.gamma * math.cos(self.x[0]), 2.0)
      )) * (
        -self.gamma
        * self.alpha
        * math.pow(self.x[3], 2.0)
        * math.sin(self.x[0])
        * math.pow(math.cos(self.x[1]), 2.0)
      -
        self.gamma
        * self.epsilon
        * math.sin(self.x[0])
        * math.cos(self.x[0])
      +
        self.gamma
        * self.alpha
        * math.pow(self.x[1], 2.0)
        * math.sin(self.x[0])
      -
        2
        * math.pow(self.alpha, 2.0)
        * self.x[1]
        * self.x[3]
        * math.sin(self.x[0])
        * math.cos(self.x[0])
      +
        self.alpha
        * self.g
        * self.latest_u
      )
    )
    return [x0_dot, x1_dot, x2_dot, x3_dot]
  =}

  # Method used to update the state
  method update_state() {=
    # The time interval is defined as the time elapsed
    # since last time we output the state
    time_interval = (lf.time.logical_elapsed() - self.elapsed_time) * 1e-9
    self.elapsed_time = lf.time.logical_elapsed()

    # RK4 Operation, return the updated x
    def RK4_ODE(x):
      h = time_interval
      k1 = self.calculate_derivatives(x)
      for i in range(len(x)):
        x[i] += k1[i] * h/2.
      k2 = self.calculate_derivatives(x)
      for i in range(len(x)):
        x[i] += k2[i] * h/2.
      k3 = self.calculate_derivatives(x)
      for i in range(len(x)):
        x[i] += k3[i] * h
      k4 = self.calculate_derivatives(x)
      for i in range(len(x)):
        x[i] += (h/6.)*(k1[i] + 2*k2[i] + 2*k3[i] + k4[i])
      return x

    # Update x using RK4
    self.x = RK4_ODE(self.x)
  =}

  # Method used to output the state
  method output_state(theta, d_theta, phi, d_phi) {=
    theta.set(self.x[0])
    d_theta.set(self.x[1])
    phi.set(self.x[2])
    d_phi.set(self.x[3])
  =}

  # The update will be triggered when either a disturbance is introduced or a sample
  # period of time has elapsed.
  # See SmallTest.lf for how disturbance updates works in a simpler forward euler
  # example
  reaction(d) {=
    self.update_state()
    self.x[1] += d.value
  =}

  reaction(t) -> theta, d_theta, phi, d_phi {=
    if not (self.first):
      self.update_state()
    else:
      self.x[0] = self.initial_theta
      self.first = False
    # Output the state.
    self.output_state(theta, d_theta, phi, d_phi)
  =}

  reaction(u) {=
    self.latest_u = u.value
  =}
}
