/**
 * A simple Pacman game. Source: https://github.com/hbokmann/Pacman LICENSE: N/A
 *
 * To run:
 * -1- lfc src/PacMan.lf
 * -2- Follow the instructions on the terminal.
 *
 * TODOs
 *
 * -1- Add more comments.
 * -2- Show a win/lose screen instead of exiting.
 * -3- Add the ability to restart the game after win/lose.
 * -4- Make the game logic more efficient if possible.
 * -5- Add personalities for each ghost instead of following pre-determined directions.
 * -6- Add modes for ghosts (exploring, chasing, running away).
 * -7- Replace the player with an AI.
 * -8- Enable federated execution if possible.
 * -9- Explore:
 * --> What to do in the case of communication failure?
 * --> What are other possible fault scenarios?
 * --> What should the AI and the ghosts see? Should they be able to see all the walls or just walls
 * close to them?
 * --> Add an external observer that is responsible for veryfing safety properties.
 * --> Explore consistency vs. availability tradeoffs in the game design.
 *
 * See https://arxiv.org/abs/2109.07771
 */
target Python {
  files: ["include/hbpacman.py", "include/images", "include/AIPacSupport.py"]
}

preamble {=
  import os
  import pyautogui
  from random import randint
  curr_dirname = os.path.dirname(__file__)
  sys.path.append(curr_dirname)
  import hbpacman as pacman

  # Construct a table of ghost characteristics to access
  # using the bank member as the index.
  ghost_specs = [
    {
      "name": "Pinky",
      "directions": pacman.Pinky_directions,
      "width": pacman.w,
      "height": pacman.m_h,
      "image": "images/Pinky.png"
    },
    {
      "name": "Blinky",
      "directions": pacman.Blinky_directions,
      "width": pacman.w,
      "height": pacman.b_h,
      "image": "images/Blinky.png"
    },
    {
      "name": "Inky",
      "directions": pacman.Inky_directions,
      "width": pacman.i_w,
      "height": pacman.m_h,
      "image": "images/Inky.png"
    },
    {
      "name": "Clyde",
      "directions": pacman.Clyde_directions,
      "width": pacman.c_w,
      "height": pacman.m_h,
      "image": "images/Clyde.png"
    }
  ]
=}

#### View
reactor Display(num_moving_sprites=0, num_static_sprites=0, nav_icon="images/pacman.png") {
  input[num_moving_sprites] moving_sprites
  input[num_static_sprites] static_sprites
  input game_over
  input score
  input[5] icon_name
  input playerpause
  input restart

  # logical action announcement
  # logical action announcementval
  # input controllerpause
  output tick
  output[5] icon

  state _game_over = False
  state _screen
  state _font
  state _clock
  state _static_sprites = {= pacman.pygame.sprite.RenderPlain() =}
  state _top_corner_text
  state _active = True
  state _announcement = True

  timer pygame_tick(0, 100 msec)  # 10 FPS

  reaction(startup) {=
    dirname = os.path.dirname(__file__)
    pacman_icon=pacman.pygame.image.load(os.path.join(dirname, self.nav_icon))
    pacman.pygame.display.set_icon(pacman_icon)

    self._clock = pacman.pygame.time.Clock()
    # Create an 606x606 sized screen
    self._screen = pacman.pygame.display.set_mode([606, 606])
    # Set the title of the window
    pacman.pygame.display.set_caption("Pacman")
    # Create a surface we can draw on
    background = pacman.pygame.Surface(self._screen.get_size())
    # Used for converting color maps and such
    background = background.convert()
    # Fill the screen with a black background
    background.fill(pacman.black)
    pacman.pygame.font.init()
    self._font = pacman.pygame.font.Font("freesansbold.ttf", 24)
    self._screen.fill(pacman.black)
  =}

  reaction(icon_name) -> icon {=
    for (idx, name) in enumerate(icon_name):
      if name.is_present:
        icon[idx].set(pacman.pygame.image.load(name.value).convert())
  =}

  reaction(pygame_tick) -> tick {=
    pacman.pygame.display.flip()
    self._clock.tick()
    tick.set(True)
    #for event in pacman.pygame.event.get():
     #   if event.type == pacman.pygame.VIDEORESIZE:
      #    self._screen = pacman.pygame.display.set_mode(event.size, pacman.pygame.RESIZABLE)
  =}

  reaction(static_sprites) {=
    # if self._active:
    for sprite in static_sprites:
      if sprite.is_present and isinstance(sprite.value, pacman.pygame.sprite.Group):
        self._static_sprites.add(sprite.value.sprites())
      elif isinstance(sprite.value, pacman.pygame.sprite.Sprite):
        self._static_sprites.add(sprite.value)

    self._static_sprites.draw(self._screen)
  =}

  reaction(score) {=
    self._top_corner_text=self._font.render("Score: "+str(score.value), True, pacman.red)
    self._screen.blit(self._top_corner_text, [10, 10])
  =}

  reaction(moving_sprites) {=
    self._screen.fill(pacman.black)
    sprite_list = pacman.pygame.sprite.RenderPlain()
    for sprite in moving_sprites:
      if sprite.is_present and isinstance(sprite.value, pacman.pygame.sprite.Group):
        sprite.value.draw(self._screen)
      elif isinstance(sprite.value, pacman.pygame.sprite.Sprite):
        sprite_list.add(sprite.value)

    sprite_list.draw(self._screen)
    self._static_sprites.draw(self._screen)
    self._screen.blit(self._top_corner_text, [10, 10])
  =}

  # reaction(game_over) {=
  # self._active = False
  # =}
  # reaction(playerpause) {=
  # if playerpause.is_present and self._game_over == False:
  # w = pacman.pygame.Surface((400,200))  # the size of your rect
  # w.set_alpha(10)        # alpha level
  # w.fill((128,128,128))       # this fills the entire surface
  # self._screen.blit(w, (100,200))  # (0,0) are the top-left coordinates
  #
  # text2=self._font.render("The game is paused.", True, pacman.white)
  # self._screen.blit(text2, [135, 303])
  # text3=self._font.render("To continue, hit SPACE.", True, pacman.white)
  # self._screen.blit(text3, [165, 333])
  # pacman.pygame.display.flip()
  #  =}
  reaction(playerpause) {=
    if playerpause.is_present and playerpause.value == True and self._game_over == False:
      w = pacman.pygame.Surface((400,200))  # the size of your rect
      w.set_alpha(10)        # alpha level
      w.fill((128,128,128))       # this fills the entire surface
      self._screen.blit(w, (100,200))  # (0,0) are the top-left coordinates

      text2=self._font.render("The game is paused.", True, pacman.white)
      self._screen.blit(text2, [135, 303])
      text3=self._font.render("To continue, hit SPACE.", True, pacman.white)
      self._screen.blit(text3, [165, 333])
      pacman.pygame.display.flip()
  =}

  reaction(pygame_tick, game_over) {=
    #Grey background
        if game_over.is_present:
          self._game_over = True
          pyautogui.keyDown(' ')
          #print("The display is ", self._active)
          w = pacman.pygame.Surface((400,200))  # the size of your rect
          w.set_alpha(10)        # alpha level
          w.fill((128,128,128))       # this fills the entire surface
          self._screen.blit(w, (100,200))  # (0,0) are the top-left coordinates

          #Won or lost
          text1=self._font.render(game_over.value, True, pacman.white)
          self._screen.blit(text1, [235, 233])

          text2=self._font.render("To play again, press ENTER or R.", True, pacman.white)
          self._screen.blit(text2, [135, 303])
          text3=self._font.render("To quit, press ESCAPE.", True, pacman.white)
          self._screen.blit(text3, [165, 333])
          pyautogui.keyUp(' ')
          pacman.pygame.display.flip()

          #for event in pacman.pygame.event.get():
           #   if event.type == pacman.pygame.KEYDOWN:
            #    print(1)
  =}

  reaction(restart) {=
    #if restart.value:
     #   self._active = True
    #    pyautogui.keyUp(' ')
    self._game_over = False
  =}
}

#### Model
## Base of every character
reactor BaseCharacter(
    width=0,
    height=0,
    image="images/Trollman.png",
    character_class = {= pacman.Player =}) {
  input wall_list  # Receive updated wall list
  input gate_list  # Receive updated gate list
  input icon

  output sprite    # input controllerpause # from controller to pause at end
  output icon_name

  state character_instance
  state _wall_list
  state _gate_list
  state _pause = {= False =}

  reaction(startup) -> icon_name {=
    dirname = os.path.dirname(__file__)
    icon_name.set(os.path.join(dirname, "images/" + self.name + ".png"))
  =}

  reaction(icon) -> sprite {=
    self.character_instance = self.character_class(self.width, self.height, icon.value)
    sprite.set(self.character_instance)
  =}

  # reaction to update pause from controller
  /**
   * reaction(controllerpause) {= self._pause = controllerpause
   * =}*
   */
  reaction(wall_list, gate_list) {=
    self._wall_list = wall_list.value
    self._gate_list = gate_list.value
  =}
}

reactor BasePlayer(
    width=0,
    height=0,
    image="images/Trollman.png",
    character_class = {= pacman.Player =}) {
  input game_over
  input frenzy
  input[4] ghost_sprites
  input wall_list  # Receive updated wall list
  input gate_list  # Receive updated gate list
  input block_list
  input icon

  state character_instance

  output sprite
  output icon_name
  output playerpause
  output restart
}

## Player
# Should be replacable with an AI
reactor Player(
    width=0,
    height=0,
    image="images/Trollman.png",
    character_class = {= pacman.Player =}) {
  timer pygame_event(0, 100 msec)
  state _active = True

  input game_over
  input frenzy
  output playerpause
  output restart

  state _speed = 30
  state _frenzy = False

  input wall_list  # Receive updated wall list
  input gate_list  # Receive updated gate list
  input icon

  output sprite
  output icon_name

  state character_instance
  state _wall_list
  state _gate_list
  state _pause = {= False =}
  state _resetting = False

  reaction(startup) -> icon_name {=
    dirname = os.path.dirname(__file__)
    icon_name.set(os.path.join(dirname, self.image))
  =}

  reaction(icon) -> sprite {=
    self.character_instance = self.character_class(self.width, self.height, icon.value)
    sprite.set(self.character_instance)
  =}

  reaction(wall_list, gate_list) {=
    self._wall_list = wall_list.value
    self._gate_list = gate_list.value
  =}

  reaction(pygame_event) -> sprite, playerpause, restart {=
    keyboard_events = pacman.pygame.event.get()
    for event in keyboard_events:
      if event.type == pacman.pygame.QUIT:
        request_stop()

      if event.type == pacman.pygame.KEYDOWN:
        if event.key == pacman.pygame.K_ESCAPE:
          request_stop()
        if event.key == pacman.pygame.K_r or event.key == pacman.pygame.K_RETURN:
          restart.set(True)
          self.character_instance.resetpos()
          self._pause = False
          self._active = True
          print(self.character_instance.rect.left)

        if event.key == pacman.pygame.K_SPACE and self._active:
          if self._pause is False:
            self._pause = True
          else:
            self._pause = False
          print(self._pause)
        elif self._pause is False:
          if event.key == pacman.pygame.K_LEFT or event.key == pacman.pygame.K_a:
            self.character_instance.changespeed(self._speed * -1, 0)
          if event.key == pacman.pygame.K_RIGHT or event.key == pacman.pygame.K_d:
            self.character_instance.changespeed(self._speed, 0)
          if event.key == pacman.pygame.K_UP or event.key == pacman.pygame.K_w:
            self.character_instance.changespeed(0, self._speed * -1)
          if event.key == pacman.pygame.K_DOWN or event.key == pacman.pygame.K_s:
            self.character_instance.changespeed(0, self._speed)

      if event.type == pacman.pygame.KEYUP and self._pause is False:
        if event.key == pacman.pygame.K_LEFT or event.key == pacman.pygame.K_a:
          self.character_instance.changespeed(self._speed, 0)
        if event.key == pacman.pygame.K_RIGHT or event.key == pacman.pygame.K_d:
          self.character_instance.changespeed(self._speed * -1, 0)
        if event.key == pacman.pygame.K_UP or event.key == pacman.pygame.K_w:
          self.character_instance.changespeed(0, self._speed)
        if event.key == pacman.pygame.K_DOWN or event.key == pacman.pygame.K_s:
          self.character_instance.changespeed(0, self._speed * -1)
        if event.key == pacman.pygame.K_b:
          self._speed -= 10

    if self._pause is False:
      self.character_instance.update(
        self._wall_list,
        self._gate_list
      )
    sprite.set(self.character_instance)
    playerpause.set(self._pause)
  =}

  reaction(game_over) {=
        self._active = False
        self._pause = True
        self.character_instance.speedzero()
    #    ending.schedule(MSEC(500))
  =}

  reaction(frenzy) {=
    self._frenzy = frenzy.value
  =}
}

## Ghosts
# FIXME: Different Ghosts should have different personalities
reactor Ghost(directions = {= () =}, name="Stinky") extends BaseCharacter {
  input tick
  input playerpause  # pause from player
  input game_over
  input restart
  input frenzy

  state turn = 0
  state steps = 0
  state _active = True
  state _resetting = False
  state _frenzy = False

  # reaction(startup) {=
  # self.image = "images/pacman.png"
  #=}
  reaction(playerpause) {=
    # if controllerpause.is_present:
    #   self._pause = controllerpause.value
    if playerpause.is_present:
      self._pause = playerpause.value
  =}

  reaction(tick) -> sprite {=
    sprite.set(self.character_instance)
    self._resetting = False
    if self._pause is False and self._active:
      returned = self.character_instance.changespeed(
        self.directions,
        False,
        self.turn,
        self.steps,
        len(self.directions)-1
      )
      self.turn = returned[0]
      self.steps = returned[1]
      self.character_instance.changespeed(
        self.directions,
        False,
        self.turn,
        self.steps,
        len(self.directions)-1
      )
      self.character_instance.update(
        self._wall_list,
        False
      )
     # if self._resetting:
       # self.character_instance.resetpos(self.name)
     #   self._resetting = False
    sprite.set(self.character_instance)
  =}

  reaction(game_over) {=
    self._active = False
  =}

  reaction(restart) {=
    self._resetting = True
    self._active = True
    self.turn = 0
    self.steps = 0
    self.character_instance.resetpos(self.name)
  =}

  reaction(frenzy) {=
    self._frenzy = frenzy.value
  =}
}

#### Controller
reactor GameController(number_of_ghosts=4) {
  output wall_list   # List of walls on the map
  output gate
  output block_list  # List of yummy dots for Pac-Man
  output score       # The game score
  output game_over
  output frenzy

  input[number_of_ghosts] ghost_sprites  # output controllerpause
  input pacman_sprite
  input tick         # The game tick
  input restart

  logical action end_frenzy

  state _wall_list
  state _gate
  state _block_list = {= pacman.pygame.sprite.RenderPlain() =}
  state _score_to_win = 0
  state _score = 0
  state _pacman_sprite
  state _pacman_collide = {= pacman.pygame.sprite.RenderPlain() =}
  state _energizer_list = {= pacman.pygame.sprite.RenderPlain() =}
  state _energizer_indices = {= [0, 0] =}
  state _frenzy = False

  # state _controllerpause({=False=}) #not necessary
  # initial mode One {
  reaction(startup) -> wall_list, gate {=
    _all_sprites_list = pacman.pygame.sprite.RenderPlain()
    self._wall_list = pacman.setupRoomOne(_all_sprites_list)
    self._gate = pacman.setupGate(_all_sprites_list)

    wall_list.set(self._wall_list)
    gate.set(self._gate)
  =}

  reaction(pacman_sprite) {=
    self._pacman_collide.empty()
    self._pacman_collide.add(pacman_sprite.value)
    self._pacman_sprite = pacman_sprite.value
  =}

  reaction(startup) -> block_list {=
    # Draw the grid

    for row in range(19):
      for column in range(19):
        if (row == 7 or row == 8) and (column == 8 or column == 9 or column == 10):
          continue
        if randint(0, 361) > 358:
          block = pacman.Block(pacman.red, 10, 10)
          self._energizer_list.add(block)
        else:
          block = pacman.Block(pacman.yellow, 4, 4)

        # Set a random location for the block
        block.rect.x = (30*column+6)+26
        block.rect.y = (30*row+6)+26

        b_collide = pacman.pygame.sprite.spritecollide(block, self._wall_list, False)
        p_collide = pacman.pygame.sprite.spritecollide(block, self._pacman_collide, False)

        if b_collide:
          continue
        if p_collide:
          continue

        # Add the block to the list of objects
        self._block_list.add(block)
        block_list.set(block) # Send it to be drawn

    # print("Finished drawing blocks")

    self._score_to_win = len(self._block_list)
    print(self._energizer_list)
    print(self._score_to_win)
  =}

  reaction(pacman_sprite) -> score, game_over, frenzy, end_frenzy {=
    blocks_hit_list = pacman.pygame.sprite.spritecollide(self._pacman_sprite, self._block_list, True)
    energizer_hit_list = pacman.pygame.sprite.RenderPlain()
    #FIXME: can also make this more efficient
    for block in blocks_hit_list:
      if block.rect.width == 10:
        energizer_hit_list.add(block)

    # Check the list of collisions.
    if len(blocks_hit_list) > 0:
      self._score +=len(blocks_hit_list)

    if self._score == self._score_to_win:
      game_over.set("Won!")
      #pyautogui.keyDown(' ')
      #print("Won")
      #self._controllerpause = True
      #pause isntead of stop game
      #controllerpause.set(True)
      #request_stop() #remove once above finished
    elif len(energizer_hit_list) > 0:
      self._frenzy = True
      print(self._frenzy)
      frenzy.set(self._frenzy)
      delay = randint(3, 7)
      end_frenzy.schedule(SEC(delay))

    score.set(self._score)
  =}

  reaction(ghost_sprites) -> game_over {=
    # FIXME: Make this more efficient.
    monsta_list = pacman.pygame.sprite.RenderPlain()
    for ghost in ghost_sprites:
      if ghost.is_present:
        monsta_list.add(ghost.value)

    monsta_hit_list = pacman.pygame.sprite.spritecollide(self._pacman_sprite, monsta_list, False)

    if monsta_hit_list and not self._frenzy:
      game_over.set("Lost!")
    elif monsta_hit_list and self._frenzy:
      for monsta in monsta_hit_list:
        monsta.moveoffgrid()
  =}

  # Send the updated blocks
  reaction(tick) -> block_list {=
    block_list.set(self._block_list)
  =}

  reaction(restart) {=
    if restart.value:
      self._block_list = pacman.pygame.sprite.RenderPlain()
      self._energizer_list = pacman.pygame.sprite.RenderPlain()
      for row in range(19):
        for column in range(19):
          if (row == 7 or row == 8) and (column == 8 or column == 9 or column == 10):
            continue
          if randint(0, 361) > 358:
            block = pacman.Block(pacman.red, 10, 10)
            self._energizer_list.add(block)
          else:
            block = pacman.Block(pacman.yellow, 4, 4)

          # Set a random location for the block
          block.rect.x = (30*column+6)+26
          block.rect.y = (30*row+6)+26

          b_collide = pacman.pygame.sprite.spritecollide(block, self._wall_list, False)
          p_collide = pacman.pygame.sprite.spritecollide(block, self._pacman_collide, False)

          if b_collide:
            continue
          if p_collide:
            continue

          # Add the block to the list of objects
          self._block_list.add(block)
      self._score_to_win = len(self._block_list)
      print(self._energizer_list)
      self._frenzy = False
      self._score = 0
  =}

  reaction(end_frenzy) -> frenzy {=
    self._frenzy = False
    print(self._frenzy, " and times up")
    frenzy.set(self._frenzy)
  =}

  # }
  reaction(shutdown) {=
    pacman.pygame.quit()
  =}
}

main reactor {
  ### Controller
  controller = new GameController()

  ### Model(s)
  player = new Player(width = {= pacman.w =}, height = {= pacman.p_h =}, image="images/pacman.png")

  # width = {=pacman.w=}, height = {=pacman.p_h=}, image = "images/pacman.png"
  # Ghosts
  ghosts = new[4] Ghost(
      width = {= ghost_specs[bank_index]["width"] =},
      height = {= ghost_specs[bank_index]["height"] =},
      directions = {= ghost_specs[bank_index]["directions"] =},
      name = {= ghost_specs[bank_index]["name"] =},
      character_class = {= pacman.Ghost =})

  # image  = {= ghost_specs[bank_index]["image"] =}
  ### View
  display = new Display(num_moving_sprites=6, num_static_sprites=2)

  # Send the list of walls to the ghosts so that they can avoid running into walls
  (controller.wall_list)+ -> ghosts.wall_list

  # Send the sprites to the display to be drawn
  controller.block_list, player.sprite, ghosts.sprite -> display.moving_sprites

  (controller.wall_list, controller.gate)+
    -> player.wall_list, player.gate_list, display.static_sprites

  (display.tick)+ -> controller.tick, ghosts.tick

  # Send pause player to game controller and ghosts
  (player.playerpause)+ -> ghosts.playerpause, display.playerpause

  # Send pause controller to player and ghosts
  # controller.controllerpause -> player.controllerpause
  player.sprite -> controller.pacman_sprite

  (ghosts.sprite)+ -> controller.ghost_sprites

  controller.score -> display.score

  ghosts.icon_name, player.icon_name -> display.icon_name

  display.icon -> ghosts.icon, player.icon

  # sending game_over to player causes problem
  (controller.game_over)+ -> display.game_over, player.game_over, ghosts.game_over

  (player.restart)+ -> controller.restart, display.restart, ghosts.restart

  # controller.block_list -> player.block_list
  (controller.frenzy)+ -> player.frenzy, ghosts.frenzy
}
